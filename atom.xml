<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Full-stack stuff</title>
  <link href="http://paullecam.github.io/atom.xml" rel="self"/>
  <link href="http://paullecam.github.io"/>
  <updated>2013-05-28T16:08:46.263Z</updated>
  <id>http://paullecam.github.io</id>
  <author>
    <name>Paul Le Cam</name>
    <email>paul@ulem.net</email>
  </author>

  
    <entry>
      <title>Make your own framework</title>
      <link href="http://paullecam.github.io//posts/make-your-own-framework"/>
      <updated>2013-05-27T22:00:00.000Z</updated>
      <id>http://paullecam.github.io//posts/make-your-own-framework</id>
      <content type="html">&lt;html lang=&quot;en&quot;&gt;&lt;head&gt;&lt;!-- Meta--&gt;&lt;meta charset=&quot;utf-8&quot; /&gt;&lt;meta http-equiv=&quot;content-type&quot; content=&quot;text/html; charset=utf-8&quot; /&gt;&lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge,chrome=1&quot; /&gt;&lt;title&gt;Make your own framework | Full-stack stuff&lt;/title&gt;&lt;meta name=&quot;description&quot; content=&quot;Personal blog about full-stack developement in JavaScript/CoffeeScript with Node, Require, Backbone, Handlebars...&quot; /&gt;&lt;meta name=&quot;keywords&quot; content=&quot;javascript, coffeescript, node, nodejs, require, requirejs, backbone, backbonejs, handlebars&quot; /&gt;&lt;meta name=&quot;author&quot; content=&quot;Paul Le Cam&quot; /&gt;&lt;meta http-equiv=&quot;X-Powered-By&quot; content=&quot;DocPad v6.35.0&quot; /&gt;&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width&quot; /&gt;&lt;!-- Icons--&gt;&lt;link rel=&quot;shortcut icon&quot; href=&quot;ico/favicon.ico&quot; /&gt;&lt;link rel=&quot;apple-touch-icon-precomposed&quot; sizes=&quot;144x144&quot; href=&quot;ico/apple-touch-icon-144-precomposed.png&quot; /&gt;&lt;link rel=&quot;apple-touch-icon-precomposed&quot; sizes=&quot;114x114&quot; href=&quot;ico/apple-touch-icon-114-precomposed.png&quot; /&gt;&lt;link rel=&quot;apple-touch-icon-precomposed&quot; sizes=&quot;72x72&quot; href=&quot;ico/apple-touch-icon-72-precomposed.png&quot; /&gt;&lt;link rel=&quot;apple-touch-icon-precomposed&quot; href=&quot;ico/apple-touch-icon-57-precomposed.png&quot; /&gt;&lt;!--[if lt IE 9]&gt;&lt;script async src=&quot;http://html5shim.googlecode.com/svn/trunk/html5.js&quot;&gt;&lt;/script&gt;&lt;![endif]--&gt;&lt;!-- Styles--&gt;&lt;link rel=&quot;stylesheet&quot; href=&quot;/vendor/prettify.css&quot; /&gt;&lt;link rel=&quot;stylesheet&quot; href=&quot;/vendor/twitter-bootstrap/css/bootstrap.css&quot; /&gt;&lt;link rel=&quot;stylesheet&quot; href=&quot;/styles/style.css&quot; /&gt;&lt;/head&gt;&lt;body&gt;&lt;header class=&quot;container&quot;&gt;&lt;h1&gt;&lt;a href=&quot;/&quot;&gt;&lt;img src=&quot;/img/logo32.png&quot; /&gt;Full-stack stuff&lt;/a&gt;&lt;/h1&gt;&lt;/header&gt;&lt;div class=&quot;main container&quot;&gt;&lt;div class=&quot;col col-lg-9&quot;&gt;&lt;div id=&quot;content&quot;&gt;&lt;article id=&quot;post&quot; class=&quot;post&quot;&gt;&lt;h2 class=&quot;series&quot;&gt;Client-side architecture, part 2&lt;/h2&gt;&lt;h1&gt;Make your own framework&lt;/h1&gt;&lt;div class=&quot;meta clearfix&quot;&gt;&lt;i&gt;May 28 2013&lt;/i&gt;&lt;/div&gt;&lt;div class=&quot;post-content&quot;&gt;&lt;h2&gt;Background&lt;/h2&gt;
&lt;p&gt;In &lt;a href=&quot;/posts/modular-design-and-librairies-abstraction/&quot;&gt;part 1&lt;/a&gt;, I presented a way to simply extract functions from different librairies, normalize and expose them in a modular way.
The goal was to abstract these underlying librairies, in order to customize their behavior for the needs of the applications.&lt;/p&gt;
&lt;h2&gt;Extending Backbone and Handlebars&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;http://backbonejs.org&quot;&gt;Backbone&lt;/a&gt; is a great framework presenting Model, View and Collection classes, and a router. I use it along with &lt;a href=&quot;http://handlebarsjs.com&quot;&gt;Handlebars&lt;/a&gt; for templating.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://backstage.soundcloud.com/2012/06/building-the-next-soundcloud/&quot;&gt;This article&lt;/a&gt; from the SoundCloud engineering team presents some great ideas on how to push them further, most notably on two aspects I wanted to implement: sharing models between views, and rendering sub-views.&lt;/p&gt;
&lt;h3&gt;Sharing models&lt;/h3&gt;
&lt;p&gt;The idea of sharing models between views is that a specific model should not require to be instanciated multiple times.&lt;/p&gt;
&lt;p&gt;If you have an &quot;user&quot; model, it may be used by different views on the page, that may require different attributes from this model. Instead of creating the user model multiple times, we can ensure that only one exists for a specific &lt;code&gt;id&lt;/code&gt;, and contains all the attributes we may need.&lt;/p&gt;
&lt;p&gt;Here is how I extend the Model constructor:&lt;/p&gt;
&lt;div class=&quot;highlight highlighted codehilite&quot;&gt;&lt;span class=&quot;cp&quot;&gt;# Each Model class must have its own store of instances&lt;/span&gt;
&lt;span class=&quot;nl&quot;&gt;store:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Store&lt;/span&gt;

&lt;span class=&quot;cp&quot;&gt;# When we instanciate a model, we check in the store if it is not already present.&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;# If this is the case, we silently update its data.&lt;/span&gt;
&lt;span class=&quot;nl&quot;&gt;constructor:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;params&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{})&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;self&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;store&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;silent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;yes&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;super&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cid&lt;/span&gt;
  &lt;span class=&quot;err&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;store&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;@&lt;/span&gt;
&lt;/div&gt;
&lt;p&gt;This is very basic: every Model contains an internal registry, &lt;code&gt;@store&lt;/code&gt;, that contains its instances identified by &lt;code&gt;id&lt;/code&gt; or &lt;code&gt;cid&lt;/code&gt;. If the instance is present in the registry, it gets updated with possible new data and directly returned. Otherwise, it is normally created and added to the registry.&lt;/p&gt;
&lt;p&gt;As stated in the SoundCloud engineering blog post, it is an application of the &lt;a href=&quot;http://addyosmani.com/resources/essentialjsdesignpatterns/book/#factorypatternjavascript&quot;&gt;factory pattern&lt;/a&gt; directly in the constructor, allowing to simply use &lt;code&gt;user = new User(id: 123)&lt;/code&gt; and actually retrieve the user with all the attributes previously set.&lt;/p&gt;
&lt;p&gt;Note that, again as stated in the article, this may not be very memory-efficient and a more advanced caching system would be interesting to auto-delete unused instances after some time.&lt;/p&gt;
&lt;h3&gt;Rendering sub-views&lt;/h3&gt;
&lt;p&gt;A limit often presented with Backbone is the ability to simply render sub-views, meaning for example the ability to render each item in a list when rendering the list, and ensuring the events are correctly bound.&lt;/p&gt;
&lt;p&gt;This is why I augment Handlebars (the &lt;code&gt;template&lt;/code&gt; object in the following code) with custom functions to ensure this goal:&lt;/p&gt;
&lt;div class=&quot;highlight highlighted codehilite&quot;&gt;&lt;span class=&quot;cp&quot;&gt;# Local store for subviews&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;subviews&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Store&lt;/span&gt;

&lt;span class=&quot;cp&quot;&gt;# Add a view to the local store and return a DOM element that we can identify&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;template&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;addSubView&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;view&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;subviews&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;view&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;view&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;template&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SafeString&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&amp;amp;lt;view data-cid=&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;#{ view.cid }&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;amp;gt;&amp;amp;lt;/view&amp;amp;gt;&quot;&lt;/span&gt;

&lt;span class=&quot;cp&quot;&gt;# Return the DOM element of a stored view and delete it from the store&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;template&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;renderSubView&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;view&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;subviews&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cid&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;subviews&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;delete&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cid&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;view&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;el&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;

&lt;span class=&quot;cp&quot;&gt;# Render all subviews present in a DOM element identified by a jQuery object&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;template&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;renderSubViews&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;el&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;err&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;el&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;view&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;view&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;err&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;view&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;el&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;find&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;view&lt;/span&gt;
    &lt;span class=&quot;err&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;view&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;replaceWith&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;template&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;renderSubView&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;view&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;cid&quot;&lt;/span&gt;
&lt;/div&gt;
&lt;p&gt;First, we need to store the sub-view of the item and return a placeholder &lt;code&gt;view&lt;/code&gt; element for the list to render.&lt;/p&gt;
&lt;p&gt;Then, once the list is rendered, we call &lt;code&gt;renderSubViews()&lt;/code&gt; on its element to iterate through the placeholders and replace them with the actual item content.&lt;/p&gt;
&lt;p&gt;This last function is then used in a method added to the View class:&lt;/p&gt;
&lt;div class=&quot;highlight highlighted codehilite&quot;&gt;&lt;span class=&quot;cp&quot;&gt;# The `renderer()` set the HTML content for the element and render eventual associated subviews&lt;/span&gt;
&lt;span class=&quot;nl&quot;&gt;renderer:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;html&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;err&quot;&gt;@$&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;el&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;attr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;data-view&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;html&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;html&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;template&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;renderSubViews&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;@$&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;el&lt;/span&gt;
  &lt;span class=&quot;err&quot;&gt;@&lt;/span&gt;
&lt;/div&gt;
&lt;p&gt;Here is a full (simple but not tested) example:&lt;/p&gt;
&lt;div class=&quot;highlight highlighted codehilite&quot;&gt;&lt;span class=&quot;nt&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;ItemView&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;View&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;tmpl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;template&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;.compile&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&quot;&quot;&lt;/span&gt;
&lt;span class=&quot;s2&quot;&gt;  &amp;amp;lt;a href=&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;uri&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&amp;amp;gt;{{label}}&amp;amp;lt;/a&amp;amp;gt;&lt;/span&gt;
&lt;span class=&quot;s2&quot;&gt;  &quot;&quot;&quot;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;events&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&quot;click&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;onClick&quot;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;onClick&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;gt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;.log&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;clicked item&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;@options&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;gt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;@renderer&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;@tmpl&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;@options&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;template&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;.registerHelper&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;renderItem&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;gt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;template&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;.addSubView&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;ItemView&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;data&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;ListView&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;View&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;tmpl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;template&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;.compile&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&quot;&quot;&lt;/span&gt;
&lt;span class=&quot;s2&quot;&gt;  &amp;amp;lt;ul&amp;amp;gt;&lt;/span&gt;
&lt;span class=&quot;s2&quot;&gt;    {{#each items}}&lt;/span&gt;
&lt;span class=&quot;s2&quot;&gt;      &amp;amp;lt;li&amp;amp;gt;{{renderItem this}}&amp;amp;lt;/li&amp;amp;gt;&lt;/span&gt;
&lt;span class=&quot;s2&quot;&gt;    {{/each}}&lt;/span&gt;
&lt;span class=&quot;s2&quot;&gt;  &amp;amp;lt;/ul&amp;amp;gt;&lt;/span&gt;
&lt;span class=&quot;s2&quot;&gt;  &quot;&quot;&quot;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;el&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;#myList&quot;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;gt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;@renderer&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;@tmpl&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;@options&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;items&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;[&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;uri&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;uri1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;label&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;label1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;uri&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;uri2&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;label&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;label2&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;uri&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;uri3&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;label&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;label3&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;ListView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;items&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;.render&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
&lt;/div&gt;
&lt;p&gt;Note that there are tons of ways to render sub-views and I have no idea which is the best.&lt;/p&gt;
&lt;p&gt;I choose this one because I did not want to have a strong coupling between &lt;code&gt;ListView&lt;/code&gt; and &lt;code&gt;ItemView&lt;/code&gt;, this way it is the &lt;code&gt;renderItem&lt;/code&gt; helper that defines the view to bind. It is then possible either to change the view in the helper, or the helper called in the template, instead of having to deal with the View classes.&lt;/p&gt;
&lt;p&gt;In a future part 3 of this series, I will focus on creating and managing widgets as simple UI components in a page.&lt;/p&gt;
&lt;/div&gt;&lt;/article&gt;&lt;footer&gt;&lt;section id=&quot;related&quot;&gt;&lt;h3&gt;Related Posts&lt;/h3&gt;&lt;nav class=&quot;linklist&quot;&gt;&lt;li&gt;&lt;span&gt;May 27 2013&lt;/span&gt; »&amp;nbsp;&lt;a href=&quot;/posts/modular-design-and-librairies-abstraction&quot;&gt;Client-side architecture, part 1: Modular design and librairies abstraction&lt;/a&gt;&lt;/li&gt;&lt;/nav&gt;&lt;/section&gt;&lt;/footer&gt;&lt;/div&gt;&lt;/div&gt;&lt;aside class=&quot;col col-lg-3&quot;&gt;&lt;h2&gt;About&lt;/h2&gt;&lt;p&gt;Hello, I'm Paul, a Freelance full-stack Web developer from France focusing on modern JavaScript technologies. &lt;a href=&quot;/pages/about&quot;&gt;Learn more&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;/pages/projects&quot;&gt;View projects&lt;/a&gt;&lt;/p&gt;&lt;/aside&gt;&lt;/div&gt;&lt;footer class=&quot;container&quot;&gt;&lt;div class=&quot;pull-right&quot;&gt;&lt;div class=&quot;twitter-follow-button social-button&quot;&gt;
	&lt;a href=&quot;https://twitter.com/paul_lecam&quot; class=&quot;twitter-follow-button&quot; data-show-count=&quot;false&quot;&gt;Follow @paul_lecam&lt;/a&gt;
	&lt;script type=&quot;text/javascript&quot; src=&quot;http://www.google-analytics.com/ga.js&quot;&gt;&lt;/script&gt;&lt;script id=&quot;twitter-wjs&quot; src=&quot;//platform.twitter.com/widgets.js&quot;&gt;&lt;/script&gt;&lt;script&gt;!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0];if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src=&quot;//platform.twitter.com/widgets.js&quot;;fjs.parentNode.insertBefore(js,fjs);}}(document,&quot;script&quot;,&quot;twitter-wjs&quot;);&lt;/script&gt;
&lt;/div&gt;&lt;div class=&quot;github-follow-button social-button&quot;&gt;
	&lt;iframe src=&quot;//ghbtns.com/github-btn.html?user=PaulLeCam&amp;amp;type=follow&amp;amp;count=true&quot; allowtransparency=&quot;true&quot; frameborder=&quot;0&quot; scrolling=&quot;0&quot; width=&quot;165&quot; height=&quot;20&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div&gt;© Paul Le Cam 2013&lt;/div&gt;&lt;div&gt;Posts on this blog are licensed under a
&lt;a rel=&quot;license&quot; href=&quot;http://creativecommons.org/licenses/by-nc-sa/3.0/&quot; target=&quot;_blank&quot;&gt;Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License&lt;/a&gt;.&lt;br /&gt;
&lt;a rel=&quot;license&quot; href=&quot;http://creativecommons.org/licenses/by-nc-sa/3.0/&quot; target=&quot;_blank&quot;&gt;&lt;img alt=&quot;Creative Commons License&quot; style=&quot;border-width:0&quot; src=&quot;http://i.creativecommons.org/l/by-nc-sa/3.0/88x31.png&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;/footer&gt;&lt;!-- Scripts--&gt;&lt;script&gt;var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-39711178-1']);
_gaq.push(['_trackPageview']);
(function(){
	var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
	ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
	var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();&lt;/script&gt;&lt;script defer=&quot;defer&quot; src=&quot;/vendor/prettify.js&quot;&gt;&lt;/script&gt;&lt;script defer=&quot;defer&quot; src=&quot;/vendor/jquery.js&quot;&gt;&lt;/script&gt;&lt;script defer=&quot;defer&quot; src=&quot;/vendor/twitter-bootstrap/js/bootstrap.min.js&quot;&gt;&lt;/script&gt;&lt;script defer=&quot;defer&quot; src=&quot;/vendor/log.js&quot;&gt;&lt;/script&gt;&lt;script defer=&quot;defer&quot; src=&quot;/vendor/modernizr.js&quot;&gt;&lt;/script&gt;&lt;script defer=&quot;defer&quot; src=&quot;/scripts/script.js&quot;&gt;&lt;/script&gt;&lt;/body&gt;&lt;/html&gt;</content>
    </entry>
  
    <entry>
      <title>Modular design and librairies abstraction</title>
      <link href="http://paullecam.github.io//posts/modular-design-and-librairies-abstraction"/>
      <updated>2013-05-26T22:00:00.000Z</updated>
      <id>http://paullecam.github.io//posts/modular-design-and-librairies-abstraction</id>
      <content type="html">&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt;&lt;!-- Meta--&gt;&lt;meta charset=&quot;utf-8&quot;&gt;&lt;meta http-equiv=&quot;content-type&quot; content=&quot;text/html; charset=utf-8&quot;&gt;&lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge,chrome=1&quot;&gt;&lt;title&gt;Modular design and librairies abstraction | Full-stack stuff&lt;/title&gt;&lt;meta name=&quot;description&quot; content=&quot;Personal blog about full-stack developement in JavaScript/CoffeeScript with Node, Require, Backbone, Handlebars...&quot;&gt;&lt;meta name=&quot;keywords&quot; content=&quot;javascript, coffeescript, node, nodejs, require, requirejs, backbone, backbonejs, handlebars&quot;&gt;&lt;meta name=&quot;author&quot; content=&quot;Paul Le Cam&quot;&gt;&lt;meta http-equiv=&quot;X-Powered-By&quot; content=&quot;DocPad v6.35.0&quot;/&gt;&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width&quot;&gt;&lt;!-- Icons--&gt;&lt;link rel=&quot;shortcut icon&quot; href=&quot;ico/favicon.ico&quot;&gt;&lt;link rel=&quot;apple-touch-icon-precomposed&quot; sizes=&quot;144x144&quot; href=&quot;ico/apple-touch-icon-144-precomposed.png&quot;&gt;&lt;link rel=&quot;apple-touch-icon-precomposed&quot; sizes=&quot;114x114&quot; href=&quot;ico/apple-touch-icon-114-precomposed.png&quot;&gt;&lt;link rel=&quot;apple-touch-icon-precomposed&quot; sizes=&quot;72x72&quot; href=&quot;ico/apple-touch-icon-72-precomposed.png&quot;&gt;&lt;link rel=&quot;apple-touch-icon-precomposed&quot; href=&quot;ico/apple-touch-icon-57-precomposed.png&quot;&gt;&lt;!--[if lt IE 9]&gt;&lt;script async src=&quot;http://html5shim.googlecode.com/svn/trunk/html5.js&quot;&gt;&lt;/script&gt;&lt;![endif]--&gt;&lt;!-- Styles--&gt;&lt;link  rel=&quot;stylesheet&quot; href=&quot;/vendor/prettify.css&quot; /&gt;&lt;link  rel=&quot;stylesheet&quot; href=&quot;/vendor/twitter-bootstrap/css/bootstrap.css&quot; /&gt;&lt;link  rel=&quot;stylesheet&quot; href=&quot;/styles/style.css&quot; /&gt;&lt;/head&gt;&lt;body&gt;&lt;header class=&quot;container&quot;&gt;&lt;h1&gt;&lt;a href=&quot;/&quot;&gt;&lt;img src=&quot;/img/logo32.png&quot;&gt;Full-stack stuff&lt;/a&gt;&lt;/h1&gt;&lt;/header&gt;&lt;div class=&quot;main container&quot;&gt;&lt;div class=&quot;col col-lg-9&quot;&gt;&lt;div id=&quot;content&quot;&gt;&lt;article id=&quot;post&quot; class=&quot;post&quot;&gt;&lt;h2 class=&quot;series&quot;&gt;Client-side architecture, part 1&lt;/h2&gt;&lt;h1&gt;Modular design and librairies abstraction&lt;/h1&gt;&lt;div class=&quot;meta clearfix&quot;&gt;&lt;i&gt;May 27 2013&lt;/i&gt;&lt;/div&gt;&lt;div class=&quot;post-content&quot;&gt;&lt;h2&gt;Background&lt;/h2&gt;
&lt;p&gt;About a year ago, I started to use &lt;a href=&quot;https://github.com/aurajs/aura&quot;&gt;Aura&lt;/a&gt; (Backbone-Aura at the time), a project by &lt;a href=&quot;http://addyosmani.com/&quot;&gt;Addy Osmani&lt;/a&gt; to present a clean structure for client-side code, following &lt;a href=&quot;http://www.nczonline.net/&quot;&gt;Nicholas Zakas&lt;/a&gt;&amp;#39; principles introduced in &lt;a href=&quot;http://www.slideshare.net/nzakas/scalable-javascript-application-architecture&quot;&gt;this presentation&lt;/a&gt;.
I discovered it at a very convenient time for me, as I was starting to use &lt;a href=&quot;http://requirejs.org/&quot;&gt;Require&lt;/a&gt; and &lt;a href=&quot;http://backbonejs.org&quot;&gt;Backbone&lt;/a&gt; for all my client-side code, and Aura presented an interesting architecture for it, as well as implementing concepts from Zakas.&lt;/p&gt;
&lt;p&gt;At the time, the project was in version 0.7 and used Backbone as a framework. The core was very simple to understand and use, so even though it was not very modular, it was very easy to customize for my applications needs.
Recent evolutions of Aura, with the release of version 0.9, unfortunately did not match my needs any more. The code feels more complex, and the choice to be used with any framework instead of only Backbone, if propbably interesting in a general manner, is more a constraint for me than anything.
So instead of continuing to customize Aura according to my needs, I went back to the basics of the concepts, and I ended up using a dead-simple architecture that just does the job.&lt;/p&gt;
&lt;h2&gt;Using modules&lt;/h2&gt;
&lt;p&gt;This one is easy: &lt;a href=&quot;http://requirejs.org/&quot;&gt;Require&lt;/a&gt; does it for you.&lt;/p&gt;
&lt;p&gt;Define your modules with their dependencies, assemble them in one or different files in your build process using &lt;a href=&quot;http://requirejs.org/docs/optimization.html&quot;&gt;r.js optimizer&lt;/a&gt;, and dynamically load them in you code if you need.&lt;/p&gt;
&lt;h2&gt;The core - abstracting librairies&lt;/h2&gt;
&lt;p&gt;I use &lt;a href=&quot;http://lodash.com/&quot;&gt;Lo-Dash&lt;/a&gt; and &lt;a href=&quot;http://jquery.com/&quot;&gt;jQuery&lt;/a&gt; in all my applications, so it felt like I would just need them anyway, but still I wanted to abstract them somehow beacuse, the same way I replaced underscore by Lo-Dash, I could use Zepto instead of jQuery. I needed a way to make these changes in a single place of my application and be sure other modules depending on it would still work as expected.&lt;/p&gt;
&lt;p&gt;I ended-up splitting the librairies into core functionnalities I was using:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;util&lt;/strong&gt;: common utilities, it is just and alias for Lo-Dash&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;template&lt;/strong&gt;: alias for Handlebars&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;dom&lt;/strong&gt;: a subset of jQuery DOM functions, such as &lt;code&gt;find()&lt;/code&gt;, &lt;code&gt;data()&lt;/code&gt; and events (&lt;code&gt;on()&lt;/code&gt;, &lt;code&gt;off()&lt;/code&gt;, &lt;code&gt;ready()&lt;/code&gt;...)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;http&lt;/strong&gt;: a subset of jQuery AJAX functions, such as &lt;code&gt;$.ajax()&lt;/code&gt;, &lt;code&gt;$.get()&lt;/code&gt;, &lt;code&gt;$.post()&lt;/code&gt;...&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;promise&lt;/strong&gt;: an alias to jQuery&amp;#39;s &lt;code&gt;$.Deferred()&lt;/code&gt; and &lt;code&gt;$.when()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;events&lt;/strong&gt;: alias for Backbone&amp;#39;s Events, with an &lt;code&gt;emit()&lt;/code&gt; function aliasing to &lt;code&gt;trigger()&lt;/code&gt; in order to match Node&amp;#39;s EventEmitter&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;mvc&lt;/strong&gt;: alias for Backbone&amp;#39;s Model, View and Collection&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;routing&lt;/strong&gt;: alias for Backbone&amp;#39;s Router and &lt;code&gt;history.start()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This way I could easily load dependencies in my modules in terms of functionalities instead of librairies, and already provide some form of sandboxing, as a module loading the &lt;code&gt;http&lt;/code&gt; module would not have access to the &lt;code&gt;dom&lt;/code&gt; functions, as it would if it had simply loaded jQuery, which is very useful to ensure the separation of concerns.&lt;/p&gt;
&lt;p&gt;I also added some of my own abstraction to these core modules:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;dev&lt;/strong&gt;: an alias to the console having to be explicitely activated, with polyfills for &lt;code&gt;time()&lt;/code&gt; and &lt;code&gt;timeEnd()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;store&lt;/strong&gt;: a simple key/value store class with convenient methods&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;command&lt;/strong&gt;: an implementation of the &lt;a href=&quot;http://addyosmani.com/resources/essentialjsdesignpatterns/book/#commandpatternjavascript&quot;&gt;command pattern&lt;/a&gt; using promises&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;All these very simple modules then served as a basis for creating a modular framework, easily extensible, that is presented in &lt;a href=&quot;/posts/make-your-own-framework/&quot;&gt;part 2&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;&lt;/article&gt;&lt;footer&gt;&lt;section id=&quot;related&quot;&gt;&lt;h3&gt;Related Posts&lt;/h3&gt;&lt;nav class=&quot;linklist&quot;&gt;&lt;li&gt;&lt;span&gt;May 28 2013&lt;/span&gt; &amp;raquo;&amp;nbsp;&lt;a href=&quot;/posts/make-your-own-framework&quot;&gt;Client-side architecture, part 2: Make your own framework&lt;/a&gt;&lt;/li&gt;&lt;/nav&gt;&lt;/section&gt;&lt;/footer&gt;&lt;/div&gt;&lt;/div&gt;&lt;aside class=&quot;col col-lg-3&quot;&gt;&lt;h2&gt;About&lt;/h2&gt;&lt;p&gt;Hello, I'm Paul, a Freelance full-stack Web developer from France focusing on modern JavaScript technologies. &lt;a href=&quot;/pages/about&quot;&gt;Learn more&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;/pages/projects&quot;&gt;View projects&lt;/a&gt;&lt;/p&gt;&lt;/aside&gt;&lt;/div&gt;&lt;footer class=&quot;container&quot;&gt;&lt;div class=&quot;pull-right&quot;&gt;&lt;div class=&quot;twitter-follow-button social-button&quot;&gt;
	&lt;a href=&quot;https://twitter.com/paul_lecam&quot; class=&quot;twitter-follow-button&quot; data-show-count=&quot;false&quot;&gt;Follow @paul_lecam&lt;/a&gt;
	&lt;script&gt;!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0];if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src=&quot;//platform.twitter.com/widgets.js&quot;;fjs.parentNode.insertBefore(js,fjs);}}(document,&quot;script&quot;,&quot;twitter-wjs&quot;);&lt;/script&gt;
&lt;/div&gt;&lt;div class=&quot;github-follow-button social-button&quot;&gt;
	&lt;iframe src=&quot;//ghbtns.com/github-btn.html?user=PaulLeCam&amp;type=follow&amp;count=true&quot; allowtransparency=&quot;true&quot; frameborder=&quot;0&quot; scrolling=&quot;0&quot; width=&quot;165&quot; height=&quot;20&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div&gt;© Paul Le Cam 2013&lt;/div&gt;&lt;div&gt;Posts on this blog are licensed under a
&lt;a rel=&quot;license&quot; href=&quot;http://creativecommons.org/licenses/by-nc-sa/3.0/&quot; target=&quot;_blank&quot;&gt;Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License&lt;/a&gt;.&lt;br /&gt;
&lt;a rel=&quot;license&quot; href=&quot;http://creativecommons.org/licenses/by-nc-sa/3.0/&quot; target=&quot;_blank&quot;&gt;&lt;img alt=&quot;Creative Commons License&quot; style=&quot;border-width:0&quot; src=&quot;http://i.creativecommons.org/l/by-nc-sa/3.0/88x31.png&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;/footer&gt;&lt;!-- Scripts--&gt;&lt;script &gt;var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-39711178-1']);
_gaq.push(['_trackPageview']);
(function(){
	var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
	ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
	var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();&lt;/script&gt;&lt;script defer=&quot;defer&quot;  src=&quot;/vendor/prettify.js&quot;&gt;&lt;/script&gt;&lt;script defer=&quot;defer&quot;  src=&quot;/vendor/jquery.js&quot;&gt;&lt;/script&gt;&lt;script defer=&quot;defer&quot;  src=&quot;/vendor/twitter-bootstrap/js/bootstrap.min.js&quot;&gt;&lt;/script&gt;&lt;script defer=&quot;defer&quot;  src=&quot;/vendor/log.js&quot;&gt;&lt;/script&gt;&lt;script defer=&quot;defer&quot;  src=&quot;/vendor/modernizr.js&quot;&gt;&lt;/script&gt;&lt;script defer=&quot;defer&quot;  src=&quot;/scripts/script.js&quot;&gt;&lt;/script&gt;&lt;/body&gt;&lt;/html&gt;</content>
    </entry>
  
</feed>
