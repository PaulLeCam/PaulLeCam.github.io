<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Full-stack stuff</title>
  <link href="http://paullecam.github.io/atom.xml" rel="self"/>
  <link href="http://paullecam.github.io"/>
  <updated>2013-05-30T11:27:14.803Z</updated>
  <id>http://paullecam.github.io</id>
  <author>
    <name>Paul Le Cam</name>
    <email>paul@ulem.net</email>
  </author>

  
    <entry>
      <title>Shared modules</title>
      <link href="http://paullecam.github.io//posts/shared-modules"/>
      <updated>2013-05-29T22:00:00.000Z</updated>
      <id>http://paullecam.github.io//posts/shared-modules</id>
      <content type="html">&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt;&lt;!-- Meta--&gt;&lt;meta charset=&quot;utf-8&quot;&gt;&lt;meta http-equiv=&quot;content-type&quot; content=&quot;text/html; charset=utf-8&quot;&gt;&lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge,chrome=1&quot;&gt;&lt;title&gt;Shared modules | Full-stack stuff&lt;/title&gt;&lt;meta name=&quot;description&quot; content=&quot;Personal blog about full-stack developement in JavaScript/CoffeeScript with Node, Require, Backbone, Handlebars...&quot;&gt;&lt;meta name=&quot;keywords&quot; content=&quot;javascript, coffeescript, node, nodejs, require, requirejs, backbone, backbonejs, handlebars&quot;&gt;&lt;meta name=&quot;author&quot; content=&quot;Paul Le Cam&quot;&gt;&lt;meta http-equiv=&quot;X-Powered-By&quot; content=&quot;DocPad v6.38.0&quot;/&gt;&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width&quot;&gt;&lt;!-- Icons--&gt;&lt;link rel=&quot;shortcut icon&quot; href=&quot;ico/favicon.ico&quot;&gt;&lt;link rel=&quot;apple-touch-icon-precomposed&quot; sizes=&quot;144x144&quot; href=&quot;ico/apple-touch-icon-144-precomposed.png&quot;&gt;&lt;link rel=&quot;apple-touch-icon-precomposed&quot; sizes=&quot;114x114&quot; href=&quot;ico/apple-touch-icon-114-precomposed.png&quot;&gt;&lt;link rel=&quot;apple-touch-icon-precomposed&quot; sizes=&quot;72x72&quot; href=&quot;ico/apple-touch-icon-72-precomposed.png&quot;&gt;&lt;link rel=&quot;apple-touch-icon-precomposed&quot; href=&quot;ico/apple-touch-icon-57-precomposed.png&quot;&gt;&lt;!--[if lt IE 9]&gt;&lt;script async src=&quot;http://html5shim.googlecode.com/svn/trunk/html5.js&quot;&gt;&lt;/script&gt;&lt;![endif]--&gt;&lt;!-- Styles--&gt;&lt;link  rel=&quot;stylesheet&quot; href=&quot;/vendor/prettify.css&quot; /&gt;&lt;link  rel=&quot;stylesheet&quot; href=&quot;/vendor/twitter-bootstrap/css/bootstrap.css&quot; /&gt;&lt;link  rel=&quot;stylesheet&quot; href=&quot;/styles/style.css&quot; /&gt;&lt;/head&gt;&lt;body&gt;&lt;header class=&quot;container&quot;&gt;&lt;h1&gt;&lt;a href=&quot;/&quot;&gt;&lt;img src=&quot;/img/logo32.png&quot;&gt;Full-stack stuff&lt;/a&gt;&lt;/h1&gt;&lt;/header&gt;&lt;div class=&quot;main container&quot;&gt;&lt;div class=&quot;col col-lg-9&quot;&gt;&lt;div id=&quot;content&quot;&gt;&lt;article id=&quot;post&quot; class=&quot;post&quot;&gt;&lt;h2 class=&quot;series&quot;&gt;Optimizing client-server communication, part 1&lt;/h2&gt;&lt;h1&gt;Shared modules&lt;/h1&gt;&lt;div class=&quot;meta clearfix&quot;&gt;&lt;i&gt;May 30 2013&lt;/i&gt;&lt;/div&gt;&lt;div class=&quot;post-content&quot;&gt;&lt;h2&gt;Background&lt;/h2&gt;
&lt;p&gt;I can&amp;#39;t remember when and where I read about the idea of Single-Page Applications for the first time, but I remember that I really enjoyed it.&lt;/p&gt;
&lt;p&gt;After all, it was about transfering as much logic as possible from the server to the client, so thinking much more about the user interactions than the constraints of server-side developments.&lt;/p&gt;
&lt;p&gt;I started to create prototypes that were mainly running client-side, mostly using the server as a REST API with a MongoDB or Redis database behind. As I wrote in &lt;a href=&quot;/posts/modular-design-and-librairies-abstraction/&quot;&gt;part 1 of my client-side architecture series&lt;/a&gt;, I used Aura at the time to create and manage widgets.&lt;/p&gt;
&lt;p&gt;One thing that I really disliked using my applications, and I know it was a feeling I had as an &lt;em&gt;user&lt;/em&gt; and not a developer, was that I always had to wait for the client code to load to actually being able to interact with the content. By that I mean that I had to wait until the client app loaded and sorted the items, before their corresponding views could be rendered and I could just &lt;em&gt;see&lt;/em&gt; their content.&lt;/p&gt;
&lt;p&gt;I felt very bad about it. Even though, as a developer, I could understand the whole process running in order to display the content I wanted, as an user I felt deeply frustrated seeing this loading animation, even for a few milliseconds.&lt;/p&gt;
&lt;p&gt;As a developer, I could feel I was not doing something right. It took me some time until I realised that having created an &amp;quot;app&amp;quot;, I had forgotten about the Web.&lt;/p&gt;
&lt;p&gt;The Web is the platform, and it&amp;#39;s great. One of the great things about it are URIs. It allows us to &lt;em&gt;directly&lt;/em&gt; access a specific content.&lt;/p&gt;
&lt;p&gt;On my smartphone, when I click on links to newspapers articles that direct me to the correspondig page, and this page asks me to download their application, they are just doing it wrong. This is a terrible user experience, even more because I know that &lt;em&gt;I already should be&lt;/em&gt; reading the content I wanted to read. The application would just get in the way, because I don&amp;#39;t need it. The Web got it right the first time with the URI, I am on the page containing the content I wanted to read.&lt;/p&gt;
&lt;p&gt;Unfortunately, without realizing it, it is somehow what I had created with my Single-Page Applications rendering content on the client. I had broken the promise that the URI would display the requested content. Instead, it was loading a client app and asking it to do the work. It is what this very simple, short-living loader was reprensenting: a broken promise that the content was accessible there.&lt;/p&gt;
&lt;p&gt;Nevertheless, I liked the ideas of Single-Page Applications, I liked to be thinking in terms of user interactions and events, but I did not want it to be more important than the content itself.&lt;/p&gt;
&lt;p&gt;My idea was to be able to do both: being able to render content on the client or server, whatever is the most convenient or performant at the time. But because I was using Backbone for client-side developments, I also needed it on the server.&lt;/p&gt;
&lt;h2&gt;Using Backbone on the server&lt;/h2&gt;
&lt;p&gt;Backbone has no problem running &amp;quot;as is&amp;quot; with Node.&lt;/p&gt;
&lt;p&gt;Problems come when you need to render views, because jQuery isn&amp;#39;t there. Actually, the DOM isn&amp;#39;t there, there&amp;#39;s no DOM in Node.&lt;/p&gt;
&lt;p&gt;Good thing is, there&amp;#39;s a Node module for that! It&amp;#39;s called &lt;a href=&quot;https://github.com/tmpvar/jsdom&quot;&gt;jsdom&lt;/a&gt;, and it makes it &lt;a href=&quot;https://github.com/PaulLeCam/node-slob/blob/master/src/jquery.coffee&quot;&gt;very easy&lt;/a&gt; to use jQuery thanks to it.&lt;/p&gt;
&lt;p&gt;So it is pretty much what you need to use Backbone with Node, code made for the client just works with it.
I extended Backbone&amp;#39;s classes according to my needs, most notably to be in sync with &lt;a href=&quot;/posts/make-your-own-framework/&quot;&gt;what I did client-side&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The biggest difference is probably in the way of rendering views, as I implemented in the &lt;code&gt;renderer()&lt;/code&gt; method (that has &lt;a href=&quot;https://github.com/PaulLeCam/slob-client/blob/master/src/ext/framework.coffee#L125&quot;&gt;its equivalent client-side&lt;/a&gt;), because instead of returning the view instance, it returns the full HTML element to be rendred:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;coffeescript&quot;&gt;renderer: (html) -&amp;gt;
  &lt;span class=&quot;property&quot;&gt;@$el&lt;/span&gt;
    .attr(&lt;span class=&quot;string&quot;&gt;&quot;data-view&quot;&lt;/span&gt;, &lt;span class=&quot;property&quot;&gt;@cid&lt;/span&gt;)
    .html html
  template.renderSubViews &lt;span class=&quot;property&quot;&gt;@$el&lt;/span&gt;
  &lt;span class=&quot;property&quot;&gt;@el&lt;/span&gt;.outerHTML&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Note that my customization of Backbone server-side is really made to match what I did client-side, as presented in &lt;a href=&quot;/posts/make-your-own-framework/&quot;&gt;this article&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Loading modules with Node and Require&lt;/h2&gt;
&lt;p&gt;The more I read about it, the more I discover ways of loading and packaging modules, both client-side and server-side.&lt;/p&gt;
&lt;p&gt;npm is such a great tool I could not imagine not having it when I deal with Node. There is &lt;a href=&quot;https://github.com/substack/node-browserify&quot;&gt;browserify&lt;/a&gt; that seems to offer the same with client-side code, but I have never tried it.
With this project, I did not want to experiment new things, I only wanted to assemble things that I knew in a way I could easily use them, and my client-side code was using &lt;a href=&quot;http://requirejs.org/&quot;&gt;RequireJS&lt;/a&gt; to define and load modules.&lt;/p&gt;
&lt;p&gt;I ended-up having a simple boilerplate for shared code, that would work both with Node and RequireJS:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;coffeescript&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;run&lt;/span&gt;&lt;/span&gt; = (mvc, exp) -&amp;gt;

  exp &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;User&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;mvc&lt;/span&gt;.&lt;span class=&quot;title&quot;&gt;Model&lt;/span&gt;&lt;/span&gt;

    store: &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; mvc.Model.Store
    urlRoot: &lt;span class=&quot;string&quot;&gt;&quot;/users&quot;&lt;/span&gt;
    idAttribute: &lt;span class=&quot;string&quot;&gt;&quot;_id&quot;&lt;/span&gt;


&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;typeof&lt;/span&gt; exports &lt;span class=&quot;keyword&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;undefined&quot;&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;# Browser&lt;/span&gt;
  define [&lt;span class=&quot;string&quot;&gt;&quot;ext/framework&quot;&lt;/span&gt;], (framework) -&amp;gt;
    run framework.mvc, (c) -&amp;gt; c

&lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;# Node&lt;/span&gt;
  {framework} = require &lt;span class=&quot;string&quot;&gt;&quot;slob&quot;&lt;/span&gt;
  run framework.mvc, (c) -&amp;gt; module.exports = c&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I hope the code is pretty self-explanatory: the &lt;code&gt;run&lt;/code&gt; function is what should work on both sides, and the last &lt;code&gt;exp&lt;/code&gt; argument is where it should return the code to be exposed. The following code then loads and exposes the dependencies depending on the context, client or server.&lt;/p&gt;
&lt;h2&gt;Connect middleware&lt;/h2&gt;
&lt;p&gt;The purpose of this Node module was to offer a way to simply render on the server views that were originally meant to be created for the client.&lt;/p&gt;
&lt;p&gt;In order to achieve this, we need to have other Backbone components (models and collections) working as well, because views generally use them.&lt;/p&gt;
&lt;p&gt;At this point, I figured that I only wanted to interact with these components in the server views, so all I needed was to load a Connect middleware exposing these functions, as presented &lt;a href=&quot;https://github.com/PaulLeCam/node-slob/blob/master/src/middleware.coffee&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Then from the views, it is very easy to load stuff by simply calling the helper: &lt;code&gt;view(&amp;quot;userInfos&amp;quot;, {model: model(&amp;quot;user&amp;quot;, user_data)})&lt;/code&gt;, assuming &lt;code&gt;user_data&lt;/code&gt; is the data sent to the view. The middleware would load, instanciate and render the corresponding content.&lt;/p&gt;
&lt;/div&gt;&lt;/article&gt;&lt;footer&gt;&lt;section id=&quot;related&quot;&gt;&lt;h3&gt;Related Posts&lt;/h3&gt;&lt;nav class=&quot;linklist&quot;&gt;&lt;li&gt;&lt;span&gt;May 28 2013&lt;/span&gt; &amp;raquo;&amp;nbsp;&lt;a href=&quot;/posts/make-your-own-framework&quot;&gt;Client-side architecture, part 2: Make your own framework&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;span&gt;May 27 2013&lt;/span&gt; &amp;raquo;&amp;nbsp;&lt;a href=&quot;/posts/modular-design-and-librairies-abstraction&quot;&gt;Client-side architecture, part 1: Modular design and librairies abstraction&lt;/a&gt;&lt;/li&gt;&lt;/nav&gt;&lt;/section&gt;&lt;/footer&gt;&lt;/div&gt;&lt;/div&gt;&lt;aside class=&quot;col col-lg-3&quot;&gt;&lt;h2&gt;About&lt;/h2&gt;&lt;p&gt;Hello, I'm Paul, a Freelance full-stack Web developer from France focusing on modern JavaScript technologies. &lt;a href=&quot;/pages/about&quot;&gt;Learn more&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;/pages/projects&quot;&gt;View projects&lt;/a&gt;&lt;/p&gt;&lt;/aside&gt;&lt;/div&gt;&lt;footer class=&quot;container&quot;&gt;&lt;div class=&quot;pull-right&quot;&gt;&lt;div class=&quot;twitter-follow-button social-button&quot;&gt;
	&lt;a href=&quot;https://twitter.com/paul_lecam&quot; class=&quot;twitter-follow-button&quot; data-show-count=&quot;false&quot;&gt;Follow @paul_lecam&lt;/a&gt;
	&lt;script&gt;!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0];if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src=&quot;//platform.twitter.com/widgets.js&quot;;fjs.parentNode.insertBefore(js,fjs);}}(document,&quot;script&quot;,&quot;twitter-wjs&quot;);&lt;/script&gt;
&lt;/div&gt;&lt;div class=&quot;github-follow-button social-button&quot;&gt;
	&lt;iframe src=&quot;//ghbtns.com/github-btn.html?user=PaulLeCam&amp;type=follow&amp;count=true&quot; allowtransparency=&quot;true&quot; frameborder=&quot;0&quot; scrolling=&quot;0&quot; width=&quot;165&quot; height=&quot;20&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div&gt;© Paul Le Cam 2013. Posts on this blog are licensed under the 
&lt;a rel=&quot;license&quot; href=&quot;http://creativecommons.org/licenses/by-nc-sa/3.0/&quot; target=&quot;_blank&quot;&gt;Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License&lt;/a&gt;.&lt;br /&gt;
&lt;a rel=&quot;license&quot; href=&quot;http://creativecommons.org/licenses/by-nc-sa/3.0/&quot; target=&quot;_blank&quot;&gt;&lt;img alt=&quot;Creative Commons License&quot; style=&quot;border-width:0&quot; src=&quot;http://i.creativecommons.org/l/by-nc-sa/3.0/88x31.png&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;/footer&gt;&lt;!-- Scripts--&gt;&lt;script &gt;var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-39711178-1']);
_gaq.push(['_trackPageview']);
(function(){
	var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
	ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
	var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();&lt;/script&gt;&lt;script defer=&quot;defer&quot;  src=&quot;/vendor/prettify.js&quot;&gt;&lt;/script&gt;&lt;script defer=&quot;defer&quot;  src=&quot;/vendor/jquery.js&quot;&gt;&lt;/script&gt;&lt;script defer=&quot;defer&quot;  src=&quot;/vendor/twitter-bootstrap/js/bootstrap.min.js&quot;&gt;&lt;/script&gt;&lt;script defer=&quot;defer&quot;  src=&quot;/vendor/log.js&quot;&gt;&lt;/script&gt;&lt;script defer=&quot;defer&quot;  src=&quot;/vendor/modernizr.js&quot;&gt;&lt;/script&gt;&lt;script defer=&quot;defer&quot;  src=&quot;/scripts/script.js&quot;&gt;&lt;/script&gt;&lt;/body&gt;&lt;/html&gt;</content>
    </entry>
  
    <entry>
      <title>Make your own framework</title>
      <link href="http://paullecam.github.io//posts/make-your-own-framework"/>
      <updated>2013-05-27T22:00:00.000Z</updated>
      <id>http://paullecam.github.io//posts/make-your-own-framework</id>
      <content type="html">&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt;&lt;!-- Meta--&gt;&lt;meta charset=&quot;utf-8&quot;&gt;&lt;meta http-equiv=&quot;content-type&quot; content=&quot;text/html; charset=utf-8&quot;&gt;&lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge,chrome=1&quot;&gt;&lt;title&gt;Make your own framework | Full-stack stuff&lt;/title&gt;&lt;meta name=&quot;description&quot; content=&quot;Personal blog about full-stack developement in JavaScript/CoffeeScript with Node, Require, Backbone, Handlebars...&quot;&gt;&lt;meta name=&quot;keywords&quot; content=&quot;javascript, coffeescript, node, nodejs, require, requirejs, backbone, backbonejs, handlebars&quot;&gt;&lt;meta name=&quot;author&quot; content=&quot;Paul Le Cam&quot;&gt;&lt;meta http-equiv=&quot;X-Powered-By&quot; content=&quot;DocPad v6.38.0&quot;/&gt;&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width&quot;&gt;&lt;!-- Icons--&gt;&lt;link rel=&quot;shortcut icon&quot; href=&quot;ico/favicon.ico&quot;&gt;&lt;link rel=&quot;apple-touch-icon-precomposed&quot; sizes=&quot;144x144&quot; href=&quot;ico/apple-touch-icon-144-precomposed.png&quot;&gt;&lt;link rel=&quot;apple-touch-icon-precomposed&quot; sizes=&quot;114x114&quot; href=&quot;ico/apple-touch-icon-114-precomposed.png&quot;&gt;&lt;link rel=&quot;apple-touch-icon-precomposed&quot; sizes=&quot;72x72&quot; href=&quot;ico/apple-touch-icon-72-precomposed.png&quot;&gt;&lt;link rel=&quot;apple-touch-icon-precomposed&quot; href=&quot;ico/apple-touch-icon-57-precomposed.png&quot;&gt;&lt;!--[if lt IE 9]&gt;&lt;script async src=&quot;http://html5shim.googlecode.com/svn/trunk/html5.js&quot;&gt;&lt;/script&gt;&lt;![endif]--&gt;&lt;!-- Styles--&gt;&lt;link  rel=&quot;stylesheet&quot; href=&quot;/vendor/prettify.css&quot; /&gt;&lt;link  rel=&quot;stylesheet&quot; href=&quot;/vendor/twitter-bootstrap/css/bootstrap.css&quot; /&gt;&lt;link  rel=&quot;stylesheet&quot; href=&quot;/styles/style.css&quot; /&gt;&lt;/head&gt;&lt;body&gt;&lt;header class=&quot;container&quot;&gt;&lt;h1&gt;&lt;a href=&quot;/&quot;&gt;&lt;img src=&quot;/img/logo32.png&quot;&gt;Full-stack stuff&lt;/a&gt;&lt;/h1&gt;&lt;/header&gt;&lt;div class=&quot;main container&quot;&gt;&lt;div class=&quot;col col-lg-9&quot;&gt;&lt;div id=&quot;content&quot;&gt;&lt;article id=&quot;post&quot; class=&quot;post&quot;&gt;&lt;h2 class=&quot;series&quot;&gt;Client-side architecture, part 2&lt;/h2&gt;&lt;h1&gt;Make your own framework&lt;/h1&gt;&lt;div class=&quot;meta clearfix&quot;&gt;&lt;i&gt;May 28 2013&lt;/i&gt;&lt;/div&gt;&lt;div class=&quot;post-content&quot;&gt;&lt;h2&gt;Background&lt;/h2&gt;
&lt;p&gt;In &lt;a href=&quot;/posts/modular-design-and-librairies-abstraction/&quot;&gt;part 1&lt;/a&gt;, I presented a way to simply extract functions from different librairies, normalize and expose them in a modular way.
The goal was to abstract these underlying librairies, in order to customize their behavior for the needs of the applications.&lt;/p&gt;
&lt;h2&gt;Extending Backbone and Handlebars&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;http://backbonejs.org&quot;&gt;Backbone&lt;/a&gt; is a great framework presenting Model, View and Collection classes, and a router. I use it along with &lt;a href=&quot;http://handlebarsjs.com&quot;&gt;Handlebars&lt;/a&gt; for templating.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://backstage.soundcloud.com/2012/06/building-the-next-soundcloud/&quot;&gt;This article&lt;/a&gt; from the SoundCloud engineering team presents some great ideas on how to push them further, most notably on two aspects I wanted to implement: sharing models between views, and rendering sub-views.&lt;/p&gt;
&lt;h3&gt;Sharing models&lt;/h3&gt;
&lt;p&gt;The idea of sharing models between views is that a specific model should not require to be instanciated multiple times.&lt;/p&gt;
&lt;p&gt;If you have an &amp;quot;user&amp;quot; model, it may be used by different views on the page, that may require different attributes from this model. Instead of creating the user model multiple times, we can ensure that only one exists for a specific &lt;code&gt;id&lt;/code&gt;, and contains all the attributes we may need.&lt;/p&gt;
&lt;p&gt;Here is how I extend the Model constructor:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;coffeescript&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# Each Model class must have its own store of instances&lt;/span&gt;
store: &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Store

&lt;span class=&quot;comment&quot;&gt;# When we instanciate a model, we check in the store if it is not already present.&lt;/span&gt;
&lt;span class=&quot;comment&quot;&gt;# If this is the case, we silently update its data.&lt;/span&gt;
constructor: (params = {}) -&amp;gt;
  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (id = params.id &lt;span class=&quot;keyword&quot;&gt;or&lt;/span&gt; params.cid) &lt;span class=&quot;keyword&quot;&gt;and&lt;/span&gt; self = &lt;span class=&quot;property&quot;&gt;@store&lt;/span&gt;.get id
    self.set params, silent: &lt;span class=&quot;literal&quot;&gt;yes&lt;/span&gt;
    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; self

  &lt;span class=&quot;keyword&quot;&gt;super&lt;/span&gt; params
  key = &lt;span class=&quot;property&quot;&gt;@id&lt;/span&gt; ? &lt;span class=&quot;property&quot;&gt;@cid&lt;/span&gt;
  &lt;span class=&quot;property&quot;&gt;@store&lt;/span&gt;.set key, @&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This is very basic: every Model contains an internal registry, &lt;code&gt;@store&lt;/code&gt;, that contains its instances identified by &lt;code&gt;id&lt;/code&gt; or &lt;code&gt;cid&lt;/code&gt;. If the instance is present in the registry, it gets updated with possible new data and directly returned. Otherwise, it is normally created and added to the registry.&lt;/p&gt;
&lt;p&gt;As stated in the SoundCloud engineering blog post, it is an application of the &lt;a href=&quot;http://addyosmani.com/resources/essentialjsdesignpatterns/book/#factorypatternjavascript&quot;&gt;factory pattern&lt;/a&gt; directly in the constructor, allowing to simply use &lt;code&gt;user = new User(id: 123)&lt;/code&gt; and actually retrieve the user with all the attributes previously set.&lt;/p&gt;
&lt;p&gt;Note that, again as stated in the article, this may not be very memory-efficient and a more advanced caching system would be interesting to auto-delete unused instances after some time.&lt;/p&gt;
&lt;h3&gt;Rendering sub-views&lt;/h3&gt;
&lt;p&gt;A limit often presented with Backbone is the ability to simply render sub-views, meaning for example the ability to render each item in a list when rendering the list, and ensuring the events are correctly bound.&lt;/p&gt;
&lt;p&gt;This is why I augment Handlebars (the &lt;code&gt;template&lt;/code&gt; object in the following code) with custom functions to ensure this goal:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;coffeescript&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# Local store for subviews&lt;/span&gt;
subviews = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Store

&lt;span class=&quot;comment&quot;&gt;# Add a view to the local store and return a DOM element that we can identify&lt;/span&gt;
template.&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;addSubView&lt;/span&gt;&lt;/span&gt; = (view) -&amp;gt;
  subviews.set view.cid, view
  &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; template.SafeString &lt;span class=&quot;string&quot;&gt;&quot;&amp;lt;view data-cid=\&quot;&lt;span class=&quot;subst&quot;&gt;#{ view.cid }&lt;/span&gt;\&quot;&amp;gt;&amp;lt;/view&amp;gt;&quot;&lt;/span&gt;

&lt;span class=&quot;comment&quot;&gt;# Return the DOM element of a stored view and delete it from the store&lt;/span&gt;
template.&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;renderSubView&lt;/span&gt;&lt;/span&gt; = (cid) -&amp;gt;
  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; view = subviews.get cid
    subviews.&lt;span class=&quot;keyword&quot;&gt;delete&lt;/span&gt; cid
    view.render().el
  &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;&quot;&lt;/span&gt;

&lt;span class=&quot;comment&quot;&gt;# Render all subviews present in a DOM element identified by a jQuery object&lt;/span&gt;
template.&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;renderSubViews&lt;/span&gt;&lt;/span&gt; = ($el) -&amp;gt;
  $el.find(&lt;span class=&quot;string&quot;&gt;&quot;view&quot;&lt;/span&gt;).each (i, view) -&amp;gt;
    $view = $el.find view
    $view.replaceWith template.renderSubView $view.data &lt;span class=&quot;string&quot;&gt;&quot;cid&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;First, we need to store the sub-view of the item and return a placeholder &lt;code&gt;view&lt;/code&gt; element for the list to render.&lt;/p&gt;
&lt;p&gt;Then, once the list is rendered, we call &lt;code&gt;renderSubViews()&lt;/code&gt; on its element to iterate through the placeholders and replace them with the actual item content.&lt;/p&gt;
&lt;p&gt;This last function is then used in a method added to the View class:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;coffeescript&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# The `renderer()` set the HTML content for the element and render eventual associated subviews&lt;/span&gt;
renderer: (html) -&amp;gt;
  &lt;span class=&quot;property&quot;&gt;@$el&lt;/span&gt;
    .attr(&lt;span class=&quot;string&quot;&gt;&quot;data-view&quot;&lt;/span&gt;, &lt;span class=&quot;property&quot;&gt;@cid&lt;/span&gt;)
    .html html
  template.renderSubViews &lt;span class=&quot;property&quot;&gt;@$el&lt;/span&gt;
  @&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here is a full (simple but not tested) example:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;coffeescript&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ItemView&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;View&lt;/span&gt;&lt;/span&gt;

  tmpl: template.compile &lt;span class=&quot;string&quot;&gt;&quot;&quot;&quot;
    &amp;lt;a href=&quot;{{uri}}&quot;&amp;gt;{{label}}&amp;lt;/a&amp;gt;
    &quot;&quot;&quot;&lt;/span&gt;

  events:
    &lt;span class=&quot;string&quot;&gt;&quot;click&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;onClick&quot;&lt;/span&gt;

  onClick: -&amp;gt;
    console.log &lt;span class=&quot;string&quot;&gt;&quot;clicked item&quot;&lt;/span&gt;, &lt;span class=&quot;property&quot;&gt;@options&lt;/span&gt;

  render: -&amp;gt;
    &lt;span class=&quot;property&quot;&gt;@renderer&lt;/span&gt; &lt;span class=&quot;property&quot;&gt;@tmpl&lt;/span&gt; &lt;span class=&quot;property&quot;&gt;@options&lt;/span&gt;

template.registerHelper &lt;span class=&quot;string&quot;&gt;&quot;renderItem&quot;&lt;/span&gt;, (data = {}) -&amp;gt;
  template.addSubView &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; ItemView data

&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ListView&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;View&lt;/span&gt;&lt;/span&gt;

  tmpl: template.compile &lt;span class=&quot;string&quot;&gt;&quot;&quot;&quot;
    &amp;lt;ul&amp;gt;
      {{#each items}}
        &amp;lt;li&amp;gt;{{renderItem this}}&amp;lt;/li&amp;gt;
      {{/each}}
    &amp;lt;/ul&amp;gt;
    &quot;&quot;&quot;&lt;/span&gt;

  el: &lt;span class=&quot;string&quot;&gt;&quot;#myList&quot;&lt;/span&gt;

  render: -&amp;gt;
    &lt;span class=&quot;property&quot;&gt;@renderer&lt;/span&gt; &lt;span class=&quot;property&quot;&gt;@tmpl&lt;/span&gt; &lt;span class=&quot;property&quot;&gt;@options&lt;/span&gt;

items = [
  {uri: &lt;span class=&quot;string&quot;&gt;&quot;uri1&quot;&lt;/span&gt;, label: &lt;span class=&quot;string&quot;&gt;&quot;label1&quot;&lt;/span&gt;}
  {uri: &lt;span class=&quot;string&quot;&gt;&quot;uri2&quot;&lt;/span&gt;, label: &lt;span class=&quot;string&quot;&gt;&quot;label2&quot;&lt;/span&gt;}
  {uri: &lt;span class=&quot;string&quot;&gt;&quot;uri3&quot;&lt;/span&gt;, label: &lt;span class=&quot;string&quot;&gt;&quot;label3&quot;&lt;/span&gt;}
]
&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; ListView({items}).render()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Note that there are tons of ways to render sub-views and I have no idea which is the best.&lt;/p&gt;
&lt;p&gt;I choose this one because I did not want to have a strong coupling between &lt;code&gt;ListView&lt;/code&gt; and &lt;code&gt;ItemView&lt;/code&gt;, this way it is the &lt;code&gt;renderItem&lt;/code&gt; helper that defines the view to bind. It is then possible either to change the view in the helper, or the helper called in the template, instead of having to deal with the View classes.&lt;/p&gt;
&lt;p&gt;In a future part 3 of this series, I will focus on creating and managing widgets as simple UI components in a page.&lt;/p&gt;
&lt;/div&gt;&lt;/article&gt;&lt;footer&gt;&lt;section id=&quot;related&quot;&gt;&lt;h3&gt;Related Posts&lt;/h3&gt;&lt;nav class=&quot;linklist&quot;&gt;&lt;li&gt;&lt;span&gt;May 27 2013&lt;/span&gt; &amp;raquo;&amp;nbsp;&lt;a href=&quot;/posts/modular-design-and-librairies-abstraction&quot;&gt;Client-side architecture, part 1: Modular design and librairies abstraction&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;span&gt;May 30 2013&lt;/span&gt; &amp;raquo;&amp;nbsp;&lt;a href=&quot;/posts/shared-modules&quot;&gt;Optimizing client-server communication, part 1: Shared modules&lt;/a&gt;&lt;/li&gt;&lt;/nav&gt;&lt;/section&gt;&lt;/footer&gt;&lt;/div&gt;&lt;/div&gt;&lt;aside class=&quot;col col-lg-3&quot;&gt;&lt;h2&gt;About&lt;/h2&gt;&lt;p&gt;Hello, I'm Paul, a Freelance full-stack Web developer from France focusing on modern JavaScript technologies. &lt;a href=&quot;/pages/about&quot;&gt;Learn more&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;/pages/projects&quot;&gt;View projects&lt;/a&gt;&lt;/p&gt;&lt;/aside&gt;&lt;/div&gt;&lt;footer class=&quot;container&quot;&gt;&lt;div class=&quot;pull-right&quot;&gt;&lt;div class=&quot;twitter-follow-button social-button&quot;&gt;
	&lt;a href=&quot;https://twitter.com/paul_lecam&quot; class=&quot;twitter-follow-button&quot; data-show-count=&quot;false&quot;&gt;Follow @paul_lecam&lt;/a&gt;
	&lt;script&gt;!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0];if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src=&quot;//platform.twitter.com/widgets.js&quot;;fjs.parentNode.insertBefore(js,fjs);}}(document,&quot;script&quot;,&quot;twitter-wjs&quot;);&lt;/script&gt;
&lt;/div&gt;&lt;div class=&quot;github-follow-button social-button&quot;&gt;
	&lt;iframe src=&quot;//ghbtns.com/github-btn.html?user=PaulLeCam&amp;type=follow&amp;count=true&quot; allowtransparency=&quot;true&quot; frameborder=&quot;0&quot; scrolling=&quot;0&quot; width=&quot;165&quot; height=&quot;20&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div&gt;© Paul Le Cam 2013. Posts on this blog are licensed under the 
&lt;a rel=&quot;license&quot; href=&quot;http://creativecommons.org/licenses/by-nc-sa/3.0/&quot; target=&quot;_blank&quot;&gt;Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License&lt;/a&gt;.&lt;br /&gt;
&lt;a rel=&quot;license&quot; href=&quot;http://creativecommons.org/licenses/by-nc-sa/3.0/&quot; target=&quot;_blank&quot;&gt;&lt;img alt=&quot;Creative Commons License&quot; style=&quot;border-width:0&quot; src=&quot;http://i.creativecommons.org/l/by-nc-sa/3.0/88x31.png&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;/footer&gt;&lt;!-- Scripts--&gt;&lt;script &gt;var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-39711178-1']);
_gaq.push(['_trackPageview']);
(function(){
	var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
	ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
	var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();&lt;/script&gt;&lt;script defer=&quot;defer&quot;  src=&quot;/vendor/prettify.js&quot;&gt;&lt;/script&gt;&lt;script defer=&quot;defer&quot;  src=&quot;/vendor/jquery.js&quot;&gt;&lt;/script&gt;&lt;script defer=&quot;defer&quot;  src=&quot;/vendor/twitter-bootstrap/js/bootstrap.min.js&quot;&gt;&lt;/script&gt;&lt;script defer=&quot;defer&quot;  src=&quot;/vendor/log.js&quot;&gt;&lt;/script&gt;&lt;script defer=&quot;defer&quot;  src=&quot;/vendor/modernizr.js&quot;&gt;&lt;/script&gt;&lt;script defer=&quot;defer&quot;  src=&quot;/scripts/script.js&quot;&gt;&lt;/script&gt;&lt;/body&gt;&lt;/html&gt;</content>
    </entry>
  
    <entry>
      <title>Modular design and librairies abstraction</title>
      <link href="http://paullecam.github.io//posts/modular-design-and-librairies-abstraction"/>
      <updated>2013-05-26T22:00:00.000Z</updated>
      <id>http://paullecam.github.io//posts/modular-design-and-librairies-abstraction</id>
      <content type="html">&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt;&lt;!-- Meta--&gt;&lt;meta charset=&quot;utf-8&quot;&gt;&lt;meta http-equiv=&quot;content-type&quot; content=&quot;text/html; charset=utf-8&quot;&gt;&lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge,chrome=1&quot;&gt;&lt;title&gt;Modular design and librairies abstraction | Full-stack stuff&lt;/title&gt;&lt;meta name=&quot;description&quot; content=&quot;Personal blog about full-stack developement in JavaScript/CoffeeScript with Node, Require, Backbone, Handlebars...&quot;&gt;&lt;meta name=&quot;keywords&quot; content=&quot;javascript, coffeescript, node, nodejs, require, requirejs, backbone, backbonejs, handlebars&quot;&gt;&lt;meta name=&quot;author&quot; content=&quot;Paul Le Cam&quot;&gt;&lt;meta http-equiv=&quot;X-Powered-By&quot; content=&quot;DocPad v6.38.0&quot;/&gt;&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width&quot;&gt;&lt;!-- Icons--&gt;&lt;link rel=&quot;shortcut icon&quot; href=&quot;ico/favicon.ico&quot;&gt;&lt;link rel=&quot;apple-touch-icon-precomposed&quot; sizes=&quot;144x144&quot; href=&quot;ico/apple-touch-icon-144-precomposed.png&quot;&gt;&lt;link rel=&quot;apple-touch-icon-precomposed&quot; sizes=&quot;114x114&quot; href=&quot;ico/apple-touch-icon-114-precomposed.png&quot;&gt;&lt;link rel=&quot;apple-touch-icon-precomposed&quot; sizes=&quot;72x72&quot; href=&quot;ico/apple-touch-icon-72-precomposed.png&quot;&gt;&lt;link rel=&quot;apple-touch-icon-precomposed&quot; href=&quot;ico/apple-touch-icon-57-precomposed.png&quot;&gt;&lt;!--[if lt IE 9]&gt;&lt;script async src=&quot;http://html5shim.googlecode.com/svn/trunk/html5.js&quot;&gt;&lt;/script&gt;&lt;![endif]--&gt;&lt;!-- Styles--&gt;&lt;link  rel=&quot;stylesheet&quot; href=&quot;/vendor/prettify.css&quot; /&gt;&lt;link  rel=&quot;stylesheet&quot; href=&quot;/vendor/twitter-bootstrap/css/bootstrap.css&quot; /&gt;&lt;link  rel=&quot;stylesheet&quot; href=&quot;/styles/style.css&quot; /&gt;&lt;/head&gt;&lt;body&gt;&lt;header class=&quot;container&quot;&gt;&lt;h1&gt;&lt;a href=&quot;/&quot;&gt;&lt;img src=&quot;/img/logo32.png&quot;&gt;Full-stack stuff&lt;/a&gt;&lt;/h1&gt;&lt;/header&gt;&lt;div class=&quot;main container&quot;&gt;&lt;div class=&quot;col col-lg-9&quot;&gt;&lt;div id=&quot;content&quot;&gt;&lt;article id=&quot;post&quot; class=&quot;post&quot;&gt;&lt;h2 class=&quot;series&quot;&gt;Client-side architecture, part 1&lt;/h2&gt;&lt;h1&gt;Modular design and librairies abstraction&lt;/h1&gt;&lt;div class=&quot;meta clearfix&quot;&gt;&lt;i&gt;May 27 2013&lt;/i&gt;&lt;/div&gt;&lt;div class=&quot;post-content&quot;&gt;&lt;h2&gt;Background&lt;/h2&gt;
&lt;p&gt;About a year ago, I started to use &lt;a href=&quot;https://github.com/aurajs/aura&quot;&gt;Aura&lt;/a&gt; (Backbone-Aura at the time), a project by &lt;a href=&quot;http://addyosmani.com/&quot;&gt;Addy Osmani&lt;/a&gt; to present a clean structure for client-side code, following &lt;a href=&quot;http://www.nczonline.net/&quot;&gt;Nicholas Zakas&lt;/a&gt;&amp;#39; principles introduced in &lt;a href=&quot;http://www.slideshare.net/nzakas/scalable-javascript-application-architecture&quot;&gt;this presentation&lt;/a&gt;.
I discovered it at a very convenient time for me, as I was starting to use &lt;a href=&quot;http://requirejs.org/&quot;&gt;Require&lt;/a&gt; and &lt;a href=&quot;http://backbonejs.org&quot;&gt;Backbone&lt;/a&gt; for all my client-side code, and Aura presented an interesting architecture for it, as well as implementing concepts from Zakas.&lt;/p&gt;
&lt;p&gt;At the time, the project was in version 0.7 and used Backbone as a framework. The core was very simple to understand and use, so even though it was not very modular, it was very easy to customize for my applications needs.
Recent evolutions of Aura, with the release of version 0.9, unfortunately did not match my needs any more. The code feels more complex, and the choice to be used with any framework instead of only Backbone, if propbably interesting in a general manner, is more a constraint for me than anything.
So instead of continuing to customize Aura according to my needs, I went back to the basics of the concepts, and I ended up using a dead-simple architecture that just does the job.&lt;/p&gt;
&lt;h2&gt;Using modules&lt;/h2&gt;
&lt;p&gt;This one is easy: &lt;a href=&quot;http://requirejs.org/&quot;&gt;Require&lt;/a&gt; does it for you.&lt;/p&gt;
&lt;p&gt;Define your modules with their dependencies, assemble them in one or different files in your build process using &lt;a href=&quot;http://requirejs.org/docs/optimization.html&quot;&gt;r.js optimizer&lt;/a&gt;, and dynamically load them in you code if you need.&lt;/p&gt;
&lt;h2&gt;The core - abstracting librairies&lt;/h2&gt;
&lt;p&gt;I use &lt;a href=&quot;http://lodash.com/&quot;&gt;Lo-Dash&lt;/a&gt; and &lt;a href=&quot;http://jquery.com/&quot;&gt;jQuery&lt;/a&gt; in all my applications, so it felt like I would just need them anyway, but still I wanted to abstract them somehow beacuse, the same way I replaced underscore by Lo-Dash, I could use Zepto instead of jQuery. I needed a way to make these changes in a single place of my application and be sure other modules depending on it would still work as expected.&lt;/p&gt;
&lt;p&gt;I ended-up splitting the librairies into core functionnalities I was using:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;util&lt;/strong&gt;: common utilities, it is just and alias for Lo-Dash&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;template&lt;/strong&gt;: alias for Handlebars&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;dom&lt;/strong&gt;: a subset of jQuery DOM functions, such as &lt;code&gt;find()&lt;/code&gt;, &lt;code&gt;data()&lt;/code&gt; and events (&lt;code&gt;on()&lt;/code&gt;, &lt;code&gt;off()&lt;/code&gt;, &lt;code&gt;ready()&lt;/code&gt;...)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;http&lt;/strong&gt;: a subset of jQuery AJAX functions, such as &lt;code&gt;$.ajax()&lt;/code&gt;, &lt;code&gt;$.get()&lt;/code&gt;, &lt;code&gt;$.post()&lt;/code&gt;...&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;promise&lt;/strong&gt;: an alias to jQuery&amp;#39;s &lt;code&gt;$.Deferred()&lt;/code&gt; and &lt;code&gt;$.when()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;events&lt;/strong&gt;: alias for Backbone&amp;#39;s Events, with an &lt;code&gt;emit()&lt;/code&gt; function aliasing to &lt;code&gt;trigger()&lt;/code&gt; in order to match Node&amp;#39;s EventEmitter&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;mvc&lt;/strong&gt;: alias for Backbone&amp;#39;s Model, View and Collection&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;routing&lt;/strong&gt;: alias for Backbone&amp;#39;s Router and &lt;code&gt;history.start()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This way I could easily load dependencies in my modules in terms of functionalities instead of librairies, and already provide some form of sandboxing, as a module loading the &lt;code&gt;http&lt;/code&gt; module would not have access to the &lt;code&gt;dom&lt;/code&gt; functions, as it would if it had simply loaded jQuery, which is very useful to ensure the separation of concerns.&lt;/p&gt;
&lt;p&gt;I also added some of my own abstraction to these core modules:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;dev&lt;/strong&gt;: an alias to the console having to be explicitely activated, with polyfills for &lt;code&gt;time()&lt;/code&gt; and &lt;code&gt;timeEnd()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;store&lt;/strong&gt;: a simple key/value store class with convenient methods&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;command&lt;/strong&gt;: an implementation of the &lt;a href=&quot;http://addyosmani.com/resources/essentialjsdesignpatterns/book/#commandpatternjavascript&quot;&gt;command pattern&lt;/a&gt; using promises&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;All these very simple modules then served as a basis for creating a modular framework, easily extensible, that is presented in &lt;a href=&quot;/posts/make-your-own-framework/&quot;&gt;part 2&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;&lt;/article&gt;&lt;footer&gt;&lt;section id=&quot;related&quot;&gt;&lt;h3&gt;Related Posts&lt;/h3&gt;&lt;nav class=&quot;linklist&quot;&gt;&lt;li&gt;&lt;span&gt;May 28 2013&lt;/span&gt; &amp;raquo;&amp;nbsp;&lt;a href=&quot;/posts/make-your-own-framework&quot;&gt;Client-side architecture, part 2: Make your own framework&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;span&gt;May 30 2013&lt;/span&gt; &amp;raquo;&amp;nbsp;&lt;a href=&quot;/posts/shared-modules&quot;&gt;Optimizing client-server communication, part 1: Shared modules&lt;/a&gt;&lt;/li&gt;&lt;/nav&gt;&lt;/section&gt;&lt;/footer&gt;&lt;/div&gt;&lt;/div&gt;&lt;aside class=&quot;col col-lg-3&quot;&gt;&lt;h2&gt;About&lt;/h2&gt;&lt;p&gt;Hello, I'm Paul, a Freelance full-stack Web developer from France focusing on modern JavaScript technologies. &lt;a href=&quot;/pages/about&quot;&gt;Learn more&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;/pages/projects&quot;&gt;View projects&lt;/a&gt;&lt;/p&gt;&lt;/aside&gt;&lt;/div&gt;&lt;footer class=&quot;container&quot;&gt;&lt;div class=&quot;pull-right&quot;&gt;&lt;div class=&quot;twitter-follow-button social-button&quot;&gt;
	&lt;a href=&quot;https://twitter.com/paul_lecam&quot; class=&quot;twitter-follow-button&quot; data-show-count=&quot;false&quot;&gt;Follow @paul_lecam&lt;/a&gt;
	&lt;script&gt;!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0];if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src=&quot;//platform.twitter.com/widgets.js&quot;;fjs.parentNode.insertBefore(js,fjs);}}(document,&quot;script&quot;,&quot;twitter-wjs&quot;);&lt;/script&gt;
&lt;/div&gt;&lt;div class=&quot;github-follow-button social-button&quot;&gt;
	&lt;iframe src=&quot;//ghbtns.com/github-btn.html?user=PaulLeCam&amp;type=follow&amp;count=true&quot; allowtransparency=&quot;true&quot; frameborder=&quot;0&quot; scrolling=&quot;0&quot; width=&quot;165&quot; height=&quot;20&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div&gt;© Paul Le Cam 2013. Posts on this blog are licensed under the 
&lt;a rel=&quot;license&quot; href=&quot;http://creativecommons.org/licenses/by-nc-sa/3.0/&quot; target=&quot;_blank&quot;&gt;Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License&lt;/a&gt;.&lt;br /&gt;
&lt;a rel=&quot;license&quot; href=&quot;http://creativecommons.org/licenses/by-nc-sa/3.0/&quot; target=&quot;_blank&quot;&gt;&lt;img alt=&quot;Creative Commons License&quot; style=&quot;border-width:0&quot; src=&quot;http://i.creativecommons.org/l/by-nc-sa/3.0/88x31.png&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;/footer&gt;&lt;!-- Scripts--&gt;&lt;script &gt;var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-39711178-1']);
_gaq.push(['_trackPageview']);
(function(){
	var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
	ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
	var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();&lt;/script&gt;&lt;script defer=&quot;defer&quot;  src=&quot;/vendor/prettify.js&quot;&gt;&lt;/script&gt;&lt;script defer=&quot;defer&quot;  src=&quot;/vendor/jquery.js&quot;&gt;&lt;/script&gt;&lt;script defer=&quot;defer&quot;  src=&quot;/vendor/twitter-bootstrap/js/bootstrap.min.js&quot;&gt;&lt;/script&gt;&lt;script defer=&quot;defer&quot;  src=&quot;/vendor/log.js&quot;&gt;&lt;/script&gt;&lt;script defer=&quot;defer&quot;  src=&quot;/vendor/modernizr.js&quot;&gt;&lt;/script&gt;&lt;script defer=&quot;defer&quot;  src=&quot;/scripts/script.js&quot;&gt;&lt;/script&gt;&lt;/body&gt;&lt;/html&gt;</content>
    </entry>
  
</feed>
